<?xml version="1.0" encoding="UTF-8"?>
<!--
这是SpringMVC 自己的IOC容器，它是spring 的 IOC 容器的子容器，从spring 的 beenr容器继承而来，注意子容器继承父容器并不是默认的。
见博客
https://blog.csdn.net/nginxs/article/details/77838914
https://www.cnblogs.com/ljdblog/p/7461854.html
 -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

  <!-- 1.配置springMVC的spring been容器要管理的been,指定springMVC的spring been容器要扫描的包 -->
  <context:component-scan base-package="cn.gcsp">
    <!--  为避免在多人分业务模块开发中，spring的IOC容器以及SpringMVC的IOC容器各自为一个been创建实例，所以使用include和exclude标签来进行更细粒度的控制  -->
    <!-- 这里控制让springMVC的IOC容器,只扫描controller及ControllerAdvice注解： -->
    <!-- 扫描注解为@Controller的类 -->
    <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    <!-- ControllerAdvice注解用来处理全局异常，可以标记在类上，故此处为扫描注解为@ControllerAdvice的类 -->
    <context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
  </context:component-scan>

  <!-- 2.配置视图解析器 -->
  <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
    <property name="prefix" value="/WEB-INF/views/"></property>
    <property name="suffix" value=".jsp"></property>
  </bean>

  <!-- 3.可以处理静态资源 -->
  <mvc:default-servlet-handler />
  <!-- 4.若只有mvc:default 而没有mvc: annotation-driven,则正常的requestMepping 不能访问，所以它俩是标配 -->
  <!-- 扩充了注解驱动，可以将请求参数绑定到控制器参数 -->
  <mvc:annotation-driven />

  <!-- 5.可以从一个页面直接请求到达另一个页面，而不用通过controller -->
  <mvc:view-controller path="/" view-name="/" />

  <!-- 6.避免IE执行AJAX时，返回JSON出现下载文件 -->
  <bean id="mappingJackson2HttpMessageConverter"
        class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
    <property name="supportedMediaTypes">
      <list>
        <value>text/html;charset=UTF-8</value>
      </list>
    </property>
  </bean>

  <!-- 7.启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->
  <bean
          class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
    <property name="messageConverters">
      <list>
        <ref bean="mappingJackson2HttpMessageConverter" /> <!-- JSON转换器 -->
      </list>
    </property>
  </bean>

  <!-- 8.配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
  <bean id="multipartResolver"
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    <!-- 默认编码 -->
    <property name="defaultEncoding" value="utf-8" />
    <!-- 文件大小最大值 -->
    <property name="maxUploadSize" value="10485760000" />
    <!-- 内存中的最大值 -->
    <property name="maxInMemorySize" value="40960" />
    <!-- 启用是为了推迟文件解析，以便捕获文件大小异常 -->
    <property name="resolveLazily" value="true"/>
  </bean>
</beans>